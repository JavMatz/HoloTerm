#!/usr/bin/env python
from requests import get
from datetime import datetime
from dateutil import tz
import argparse
import json

def get_args():
    parser = argparse.ArgumentParser(
            description='Check the schedules of the talents of HoloPro from your terminal!')

    parser.add_argument('talents', metavar='talents', nargs='+', choices=['pro', 'stars', 'live'], default=['pro'], help='Pick between the boys and the girls or both')
    parser.add_argument('-s', '--streaming', action='store_true', help="Only show active streams")
    parser.add_argument('-u', '--upcoming', action='store_true', help="Only show upcoming streams")

    return parser.parse_args()

def get_schedules():
    if ('pro' in talents) or ('stars' in talents and 'live' in talents):
        requestLive = get('https://schedule.hololive.tv/api/list/7')
        requestStars = get('https://schedule.hololive.tv/api/list/10')
        scheduleData = [*requestLive.json()["dateGroupList"], *requestStars.json()["dateGroupList"]]
        requestStars.close()
        requestLive.close()
    elif 'stars' in talents:
        requestStars = get('https://schedule.hololive.tv/api/list/10')
        scheduleData = requestStars.json()["dateGroupList"]
        requestStars.close()
    elif 'live' in talents:
        requestLive = get('https://schedule.hololive.tv/api/list/7')
        scheduleData = requestLive.json()["dateGroupList"]
        requestLive.close()

    return scheduleData

def already_streamed(videoData):
    """ 
    See if the stream has already been streamed
    """
    streamingDate = datetime.strptime(videoData["datetime"], "%Y/%m/%d %H:%M:%S")
    streamingDate = streamingDate.replace(tzinfo=japanTime)

    now = datetime.now()
    now = now.replace(tzinfo=localTime)

    if now > streamingDate:
        return True 
    else:
        return False

def japan_to_local_time(date):
    """ 
    Convert date to local time

    Args:
    datetime: String with format yyyy/mm/dd hh:mm:ss on JST Time
    """
    jpn = datetime.strptime(date, "%Y/%m/%d %H:%M:%S")
    jpn = jpn.replace(tzinfo=japanTime)

    local = jpn.astimezone(localTime) 
    return local.strftime("%Y/%m/%d %H:%M:%S")

def print_video_info(videoData):
    """
    Prints the video information on a pretty line.

    Args:
    videoData is a dictionary with the next format  
    {
        "displayDate": String with the hour of the video on a 24hr format on JST Time
        "datetime": String with the date of the video on a yyyy/mm/dd hh:mm:ss format for JST Time
        "isLive": Bool, true if is talent is streaming, false if it's not
        "platformType": Int, 1 if YouTube, 0 if Twitch,
        "url": String, the link to the stream. If platformType=0, this links to the Twitch profile of the talent
        "thumbnail": String, link to the thumbnail shown on the hololive website
        "title": String with the title of the video. If platformType=0, this string is empty
        "name": String with the name of the talent
        "talent": Dictionary with the following format
            {
                "iconImageUrl": String, link to to an icon of the talent
        }
        "collaboTalents": List containing dictionaries like the one in talent
    }
    """
    line = []
    # Live or not
    if videoData["isLive"]:
        line.append("LIVE ðŸ”´")
    else:
        line.append("NEXT ðŸ•‘")
        line.append("at "+japan_to_local_time(videoData["datetime"]))

    # Who
    line.append(videoData["name"])
    # Like to put the oshi mark here
    # line.append("âœŒ")

    # What
    if videoData["platformType"] == 0:
        line.append("")
    elif videoData["platformType"] == 1:
        line.append(videoData["title"])

    # The link
    line.append("ðŸ”— "+videoData["url"])

    print(' '.join(line))

if __name__ == "__main__":
    japanTime = tz.gettz('UTC+09:00')
    localTime = tz.tzlocal()

    talents = get_args().talents
    streaming = get_args().streaming
    upcoming = get_args().upcoming
    schedules = get_schedules()

    videos = []
    for item in schedules: 
        videos.extend(item["videoList"])

    liveNow = [video for video in videos if video["isLive"]]
    upComing = [video for video in videos if video not in liveNow]
    upComing = [video for video in upComing if not already_streamed(video)]

    if not(streaming or upcoming) or (streaming and upcoming): 
        for video in [*liveNow, *upComing]:
            print_video_info(video)
    elif get_args().streaming:
        for video in liveNow:
            print_video_info(video)
    elif get_args().upcoming:
        for video in upComing:
            print_video_info(video)
